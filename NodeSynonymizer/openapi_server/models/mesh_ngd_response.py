# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class MeshNgdResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result_code=None, message=None, value=None):  # noqa: E501
        """MeshNgdResponse - a model defined in OpenAPI

        :param result_code: The result_code of this MeshNgdResponse.  # noqa: E501
        :type result_code: str
        :param message: The message of this MeshNgdResponse.  # noqa: E501
        :type message: str
        :param value: The value of this MeshNgdResponse.  # noqa: E501
        :type value: float
        """
        self.openapi_types = {
            'result_code': str,
            'message': str,
            'value': float
        }

        self.attribute_map = {
            'result_code': 'result_code',
            'message': 'message',
            'value': 'value'
        }

        self._result_code = result_code
        self._message = message
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'MeshNgdResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MeshNgdResponse of this MeshNgdResponse.  # noqa: E501
        :rtype: MeshNgdResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result_code(self):
        """Gets the result_code of this MeshNgdResponse.

        Set to OK for success, or some other short string to indicate and error (e.g., TermNotFound, etc.)  # noqa: E501

        :return: The result_code of this MeshNgdResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this MeshNgdResponse.

        Set to OK for success, or some other short string to indicate and error (e.g., TermNotFound, etc.)  # noqa: E501

        :param result_code: The result_code of this MeshNgdResponse.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def message(self):
        """Gets the message of this MeshNgdResponse.

        Extended message denoting the success or mode of failure for request  # noqa: E501

        :return: The message of this MeshNgdResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MeshNgdResponse.

        Extended message denoting the success or mode of failure for request  # noqa: E501

        :param message: The message of this MeshNgdResponse.
        :type message: str
        """

        self._message = message

    @property
    def value(self):
        """Gets the value of this MeshNgdResponse.

        Calculated Normalized Google Distance for the two supplied terms  # noqa: E501

        :return: The value of this MeshNgdResponse.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MeshNgdResponse.

        Calculated Normalized Google Distance for the two supplied terms  # noqa: E501

        :param value: The value of this MeshNgdResponse.
        :type value: float
        """

        self._value = value
