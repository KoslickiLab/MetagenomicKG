# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Question(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text=None, language=None):  # noqa: E501
        """Question - a model defined in OpenAPI

        :param text: The text of this Question.  # noqa: E501
        :type text: str
        :param language: The language of this Question.  # noqa: E501
        :type language: str
        """
        self.openapi_types = {
            'text': str,
            'language': str
        }

        self.attribute_map = {
            'text': 'text',
            'language': 'language'
        }

        self._text = text
        self._language = language

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this Question.

        Free text question  # noqa: E501

        :return: The text of this Question.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Question.

        Free text question  # noqa: E501

        :param text: The text of this Question.
        :type text: str
        """

        self._text = text

    @property
    def language(self):
        """Gets the language of this Question.

        Human language in which the question is posed  # noqa: E501

        :return: The language of this Question.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Question.

        Human language in which the question is posed  # noqa: E501

        :param language: The language of this Question.
        :type language: str
        """
        allowed_values = ["English"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language
